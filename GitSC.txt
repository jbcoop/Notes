softwarecarpentry.org git lesson
Quick:
1. create dir locally
2. git add
3. git commit -m
4. git add remote origin https.... (from github)
5. git push origin master


$git config --help

settings per machine
$git config --list

pwd, cd, mkdir ... use cmd line commands
$ cd 'C:/Users/Jeremy Cooper/Desktop/planets'

To create a REPO:
$git init

$ ls

shows all files
$ ls -a

$git status

to create a new text file (per your configuration editor choice):
$start notepadd++ <filename>.txt

from the dir you are currently in:
$ls - list files
$cat (name).txt - display body of file

$git add (name).txt - to track changes

$git status

$git commit - if you hit enter, your text editor will pop up to add a comment
or just do this:
$git commit -m "Start notes on Mars as a base"  
- to record changes use git commit -m "message" !!!short but descriptive.

Good commit messages start with a brief (<50 characters) 
summary of changes made in the commit. 
If you want to go into more detail, 
add a blank line between the summary line and your additional notes.

now run git status - everything should be up to date

$git log - shows changes

The last line is the key phrase: 
“no changes added to commit”. 
We have changed this file, 
but we haven’t told Git we will 
want to save those changes 
(which we do with git add) nor 
have we saved them (which we do with git commit). 
So let’s do that now. 
It is good practice to always review our changes 
before saving them. We do this using git diff. 
This shows us the differences between the 
current state of the file and the most 
recently saved version.

after checking changes use
$git add (name).txt and
$git commit -m "....."

If you think of Git as taking snapshots of 
changes over the life of a project, git add 
specifies what will go in a snapshot 
(putting things in the staging area), 
and git commit then actually takes the snapshot, 
and makes a permanent record of it (as a commit).

To get out of the pager, press q.
To move to the next page, press the space bar.
To search for some_word in all pages, 
type /some_word and navigate throught matches pressing n.

see most recent commit:
$ git log -1
or
$ git log --oneline
or
$ git log --oneline --graph --all --decorate

*******
You can refer to the most recent commit of the working directory by using the identifier HEAD.

$ git diff HEAD(~1,2,3,...) mars.txt
or 
$ git diff f22b25e3233b4645dabd0d81e651fe074bd8e73b mars.txt - from commit ID, use $git log
or 
$ git diff --staged
*********
We could also use $ git show which shows us what 
changes we made at an older commit as well 
as the commit message, rather than the differences 
between a commit and our working directory that we 
see by using git diff.

$ git checkout HEAD (name).txt or
$ git checkout f22b25e mars.txt - git checkout restores an old version of a file
$ git checkout -f master mars.txt - we can put things back the way they were with by using git checkout:

git log - # Look at the git history of the project to find the commit ID
Copy the ID (the first few characters of the ID, e.g. 0b1d055).
git revert [commit ID]
Type in the new commit message.
Save and close

git log --patch (name).txt
git log --patch HEAD~3 HEAD~1 *.txt
*********
save a .gitignore.txt file with files to ignore
$ git add .gitignore
$ git commit -m "Add the ignore file"
$ git statu
ls -a
git status --ignored
exceptions can be made!

add to github: 
$ git remote add origin https://github.com/(.....).git
$ git remote -v
$ git push origin master
$ git pull origin master

**********
When updating an existing file, treat just like any other change:
$ git add <filename>
$ git commit -m "....."
$ git push origin master
**********
$git clone